apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

if (openAop) {
    apply plugin: 'com.hujiang.android-aspectjx'
}

kapt {
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

android {
    compileSdkVersion proVer.compileSdk
    defaultConfig {
        applicationId "com.jsongo.mybasefrm.demo"
        targetSdkVersion proVer.targetSdk
        minSdkVersion proVer.minSdk
        versionCode libConf.demo.verCode
        versionName libConf.demo.verName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "x86_64"
        }
        javaCompileOptions {
            annotationProcessorOptions.includeCompileClasspath = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            //单元测试引用android资源
            includeAndroidResources = true
        }
    }
    buildTypes {
        debug {
            //开启测试覆盖率
            testCoverageEnabled true

            resValue "string", "SERVER_ADDRESS_RELEASE", "${SERVER_ADDRESS_RELEASE}"
            resValue "string", "SERVER_ADDRESS_DEBUG", "${SERVER_ADDRESS_DEBUG}"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', '../proguard-rules.pro', '../tencentx5_proguard.pro'

            ext.enableCrashlytics = false
        }
        release {
            resValue "string", "SERVER_ADDRESS_RELEASE", "${SERVER_ADDRESS_RELEASE}"
            resValue "string", "SERVER_ADDRESS_DEBUG", "${SERVER_ADDRESS_DEBUG}"

            //开启资源压缩，必须开启混淆
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', '../proguard-rules.pro', '../tencentx5_proguard.pro'
        }
    }

    dexOptions {
        //增加编译内存
        javaMaxHeapSize "4g"
        jumboMode = true
        preDexLibraries = true
        maxProcessCount = 8
    }
    lintOptions {
        //忽略打包时错误
        checkReleaseBuilds false
        abortOnError false
    }
    aaptOptions {
        cruncherEnabled false
    }
}

dependencies {

    if (libConf.useOnlineAAR) {
        implementation "com.jsongo.basefrm:annotation:${libConf.annotation.aarVer}"
        implementation "com.jsongo.basefrm:core:${libConf.core.aarVer}"
        implementation "com.jsongo.basefrm:ajs:${libConf.ajs.aarVer}"
        implementation "com.jsongo.basefrm:ui:${libConf.ui.aarVer}"
        implementation "com.jsongo.basefrm:mobileim:${libConf.mobileim.aarVer}"
        kapt "com.jsongo.basefrm:processor:${libConf.processor.aarVer}"
    } else {
        implementation project(path: ':annotation')
        implementation project(path: ':core')
        implementation project(path: ':ajs')
        implementation project(path: ':ui')
        implementation project(path: ':mobileim')
        kapt project(path: ':processor')
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //测试使用类库
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
